# encoding: utf-8


def decode(onePerson):
    """
    将一个17位的二进制编码转换为C,gamma的十进制解

    前十位表示C【0，10000】

    后七位表示gamma（0，100】

    :param onePerson:要转换的二进制数，17位，前10位为C，后7位为gamma
    :return:（C，gamma）
    """
    """首先C和gamma都应该是个连续值，但是计算机表示的数据都是离散的。那么，针对这个问题，我是这样做的：
首先，对于C【0，1w】的取值，我们可以把它分为1000份，每一份代表10，也就是说表示范围变为：
0,10, 20, 30 一直到1w。
我们知道，2的10次方是1024，所以我们可以用10位二进制来表示这1000份，当大于1000时，仍表示为1000。
接下来表示gamma（0，100】，我们知道2的7次方是128，所以我们可以用7位二进制来表示，其中当二进制表的结果小于等于1时，则为1。当二进制表示结果大于等于100时，仍表示100。
那么个体编码就是17位二进制了。"""
    x = onePerson[0:10]  # 前十位表示惩罚因子C
    y = onePerson[10:17]  # 后七位表示gamma
    x = int(x, 2)  # 二进制转换为十进制int型
    y = int(y, 2)  # 二进制转换为十进制int型

    "边界条件"
    if x >= 10000:
        x = 10000
    if y <= 1:
        y = 1
    elif y >= 10000:
        y = 100

    return x, y


print(decode("00000000010000111"))  # 输出结果（1，3）
